# compare algorithms (bicycle and energy datasets)
# MinVarGmA (+-LS), Greedy (add afterwards as baseline), COHDA, Dynamic Programming (TODO), Ants (TODO), Reinforcement learning (TODO)
# >>>compare with Opt on small size<<<
# per algorithm: compare different configurations (MinVar, Ants, Reinforcement learning?)

init-out = output-data/EAlgorithmOpt.m
init-numExperiments = 20
init-numIterations = 100
init-numUser = 10
init-architecture.priority = HIGH_RANK
init-architecture.rank = RANK
init-architecture.type = SORTED_HtL
init-architecture.rankGenerator = RandomRank
init-costSignal = zero
# measure same as cost function

init-architecture.balance = WEIGHT_BALANCED
plot-architecture.maxChildren = 2
plot-dataset = Noise_4_2_0.0_1.0, \
               Noise_4_4_0.0_1.0, \
               Noise_4_8_0.0_1.0, \
               Noise_4_16_0.0_1.0, \
               Noise_4_32_0.0_1.0, \
               Noise_4_64_0.0_1.0, \
               Noise_4_128_0.0_1.0
comp-agentFactory = IEPOS,IGreedy,Opt
#comp-outputMovie = false

list-config1 = MinCostGmA(std,m/n-m,sum)
plot-fitnessFunction = config1
comp-localSearch = 