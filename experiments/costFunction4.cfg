# compare cost functions
# variance, match target, generic quadratic cost, cost
# max entropy, normalized deviation

# evaluation: when within ...% of equilibrium?

# rand: improvement for minimizing std deviation, only when 1'*A*1~0 and a'*A*a>>0, a'*1=0 (A p.s.d. not sufficient), equal B can improve convergence (E5.1)
# rand: no noticeable difference in convergence between non-convex/convex problems.
# rand: convergence behaviour of G/GmA and normalized/un-normalized previous aggregates similar to min variance

init-out = output-data/ECostFunction4.m
init-numExperiments = 20
init-numIterations = 500
init-numUser = 99999
init-architecture.priority = HIGH_RANK
init-architecture.rank = RANK
init-architecture.type = SORTED_HtL
init-architecture.rankGenerator = RandomRank
init-costSignal = zero
# measure same as cost function

init-architecture.balance = WEIGHT_BALANCED
plot-architecture.maxChildren = 2
plot-dataset = E5.1,E5.3
plot-agentFactory = IGreedy
comp-outputMovie = false

list-config1 = MinCostGmA(std,m/n-m,sum)
list-config2 = MinCostGmA(relStd,m/n-m,sum)
list-config3 = MinCostGmA(match,m/n-m,sum)
list-config4 = MinCostGmA(dot,m/n-m,sum)
list-config5 = MinCostGmA(entropy,m/n-m,sum)
list-config6 = MinCostGmA(rand,m/n-m,sum)
plot-fitnessFunction = config1,config2,config3,config4,config5,config6

comp-localSearch = 